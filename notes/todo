TODO
-------------------------------------------------------------------------------
Handle b.default as an input for ConstraintTable

Create specs to parse a fixture file and write out the parse tree, comparing
the input string with the output string, minding #characters.

Fix writing ISA segment out to replace separator elements with the chosen
override separators (: and ^)

Support for configurable external code sources. The minimal interface should
implement #include?(code). Need to decide how to handle unconfigured external
code sources -- should there be a method to list all the code sources in some
transaction set?

Validations:
  Extended or basic character set usage
  Sequential number of HL segments
  Match children HL02 with parent HL01
  Confirm HL04 matches with the (non-)existence of children
  Uniqueness of control numbers: CLM01, ...
  Balanced line-level and claim-level amounts, COB amounts, etc
  BHT03 is limited to 30 chars (only in HIPAA X222 837)

Implement an automated FA999 Functional Acknowledgement generator that accepts
any FunctionalGroupVal as input. This will be useful for writing integration
tests, but more importantly it will create use cases that will require changes
to Reader and Builder to gracefully handle more unhappy-paths.

Create an InstructionTable method that verifies the significance and validity of
a given segment_tok. For instance, no qualifier is needed to locate 2000CA NM1
when the current state is within 2000C. Therefore, the ConstraintTable does not
validate the qualifier if one is given. In general, we want to know if a given
pattern-matching token is guaranteed to match nothing. This should also include
element length checks.

Allow Builder to start from an empty Envelope::TransactionSet (ST/SE), so the
outer envelopes can be constructed independently. This will require some smarts
to detect when the TransactionSetDef might use repetition separators because not
all InterchangeDefs have support for it. This will also require a way to insert
subtrees (safely, checking syntax) via the StateMachine.

Enhance Generation#insert to do further validation when inserting segment behind
another segment. This can probably be done by comparing A and B's instruction
for C's segment token, where C is being inserted between A and B. The difficulty
comes in doing this efficiently, as checking "am I the last segment?" before
each segment could really hurt file reading performance, and converting the
SegmentVal back into a SegmentTok just to lookup the instruction isn't optimal.

Implement StateMachine#delete to remove the current segment, and possibly the
dependent segments. This probably doesn't require validating the resulting tree.

Evaluate implementation guide conformance regarding ElementReq and SyntaxNote.
This requires interpreting the meaning of SyntaxNote, so its necessarily version
specific.

Update GuideBuilder to ensure SegmentReq, ElementReq, and RepeatCount are only
restricted by the implementation guide and not made less restrictive.

Reduce startup costs by Marshal'ing definition trees - requires eliminating
anonymous classes which are used to instantiate singleton objects.

DONE
-------------------------------------------------------------------------------
Fix the error handling with Reader::TokenReader so StateMachine can know when
reading a segment failed due to EOF at an expected or unexpected boundary.

Navigation#find doesn't find next ISA segment when positioned on a preceeding
ISA segment. Looking at the #successors, it looks like a wrong instruction...
it should be Instruction[ISA](pop: 1, push: InterchangeState). This is probably
fixable in InterchangeState.push?

[InstructionTable(
    1: Instruction[ISB: Grade of Service..](pop: 0, drop: 1),
    2: Instruction[ISE: Deferred Deliver..](pop: 0, drop: 2),
    3: Instruction[TA1: Interchange Ackn..](pop: 0, drop: 2),
    4: Instruction[ GS](pop: 0, drop: 3, push: FunctionalGroupState),
    5: Instruction[IEA: Interchange Cont..](pop: 0, drop: 5),
    6: Instruction[ISA](pop: 2, drop: 0, push: TransmissionState))]

Handle the weird case with ISA02 & ISA04 which can be blank but must be padded
to their min_lengths. Other non-required elements shouldn't be padded when blank

Navigation#find doesn't find the SE segment from an 835 transaction if it is
preceeded by PLB. This seems to indicate that in general, it doesn't correctly
deal with tables that can begin with more than one segment (Table 3 can begin
with PLB or SE).

Extend Builder::BuilderDsl to accept a "strict" flag that checks several things
that would get re-checked by an editor, but does so as the segment is generated
and raises an exception. These validations go beyond what the StateMachine does,
and must be kept separate to ensure parsing an input stream isn't hamstrung with
overly aggressive validation.

Enhance Navigation#find to filter *all* pattern-matching elements, since the
InstructionTable doesn't work this way. We could use this to find the CLM whose
control number is "FOO-KS 200" even though CLM01 is not an element in the basis
for the ConstraintTable.

Improve the tree traversal API. This is hard to conceive, but perhaps working on
the Editor code will reveal the key problems. Perhaps something like zipper that
can use qualifier values to search for specific instances of SegmentUse

Create a new AbstractState that bypasses the parse tree. This will be useful
when we want to skip an entire transaction, functional group, or interchange.

Design the error handling more carefully. Currently constructors for subclasses
of SimpleElementVal raise exceptions for badly formatted input, which will blow
up the parser -- this is fine for programmatic X12 generation but not when we're
reading a file.

Code lookup values in pretty printer output. This will force a design choice on
where the CodeConfig is bound -- globally, to the parse tree, or parameterized?

Fix the StateMachine's handling of Reader. When ISE is read, the TokenReader
should be "downcast" to StreamReader. Otherwise we don't correctly skip non-X12
data from the input stream between interchanges.

Colorized pretty printer output. Definitions and meta-data should be separately
colored (to blend in with the background), element values should stand out, and
invalid elements should stand out most

Implement Builder::FailureState -- the "non-clean" 835 sample files are tripping
the error handling in one of the AbstractState.push methods.

Change Builder::StateMachine#input! to either require a reader or correctly deal
with having a nil reader. Currently the InterchangeState.push constructior blows
up because it tries to merge reader.separators

Programmatic API for Builder that constructs SegmentTok and friends with stack
frames for the input position. Requires creating a new Reader::Position class
because constructing a Reader::Input to encode the position is yucky.

Implement the destructive update methods for both AbstractState subclasses and
for Values/Envelope data types. Need to evaluate when both can be called, when
only the AbstractState can be modified destructively, etc.
